//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version:4.0.30319.42000
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace Client.ServiceReference1 {
    using System.Runtime.Serialization;
    using System;
    
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Runtime.Serialization", "4.0.0.0")]
    [System.Runtime.Serialization.DataContractAttribute(Name="Currency", Namespace="http://schemas.datacontract.org/2004/07/LibraryServer")]
    [System.SerializableAttribute()]
    public partial class Currency : object, System.Runtime.Serialization.IExtensibleDataObject, System.ComponentModel.INotifyPropertyChanged {
        
        [System.NonSerializedAttribute()]
        private System.Runtime.Serialization.ExtensionDataObject extensionDataField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private double ExchangeRateField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string IsoField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string NameField;
        
        [global::System.ComponentModel.BrowsableAttribute(false)]
        public System.Runtime.Serialization.ExtensionDataObject ExtensionData {
            get {
                return this.extensionDataField;
            }
            set {
                this.extensionDataField = value;
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public double ExchangeRate {
            get {
                return this.ExchangeRateField;
            }
            set {
                if ((this.ExchangeRateField.Equals(value) != true)) {
                    this.ExchangeRateField = value;
                    this.RaisePropertyChanged("ExchangeRate");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string Iso {
            get {
                return this.IsoField;
            }
            set {
                if ((object.ReferenceEquals(this.IsoField, value) != true)) {
                    this.IsoField = value;
                    this.RaisePropertyChanged("Iso");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string Name {
            get {
                return this.NameField;
            }
            set {
                if ((object.ReferenceEquals(this.NameField, value) != true)) {
                    this.NameField = value;
                    this.RaisePropertyChanged("Name");
                }
            }
        }
        
        public event System.ComponentModel.PropertyChangedEventHandler PropertyChanged;
        
        protected void RaisePropertyChanged(string propertyName) {
            System.ComponentModel.PropertyChangedEventHandler propertyChanged = this.PropertyChanged;
            if ((propertyChanged != null)) {
                propertyChanged(this, new System.ComponentModel.PropertyChangedEventArgs(propertyName));
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Runtime.Serialization", "4.0.0.0")]
    [System.Runtime.Serialization.DataContractAttribute(Name="History", Namespace="http://schemas.datacontract.org/2004/07/LibraryServer")]
    [System.SerializableAttribute()]
    public partial class History : object, System.Runtime.Serialization.IExtensibleDataObject, System.ComponentModel.INotifyPropertyChanged {
        
        [System.NonSerializedAttribute()]
        private System.Runtime.Serialization.ExtensionDataObject extensionDataField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private double[] AmountsField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private double[] ExchangeRatesField;
        
        [global::System.ComponentModel.BrowsableAttribute(false)]
        public System.Runtime.Serialization.ExtensionDataObject ExtensionData {
            get {
                return this.extensionDataField;
            }
            set {
                this.extensionDataField = value;
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public double[] Amounts {
            get {
                return this.AmountsField;
            }
            set {
                if ((object.ReferenceEquals(this.AmountsField, value) != true)) {
                    this.AmountsField = value;
                    this.RaisePropertyChanged("Amounts");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public double[] ExchangeRates {
            get {
                return this.ExchangeRatesField;
            }
            set {
                if ((object.ReferenceEquals(this.ExchangeRatesField, value) != true)) {
                    this.ExchangeRatesField = value;
                    this.RaisePropertyChanged("ExchangeRates");
                }
            }
        }
        
        public event System.ComponentModel.PropertyChangedEventHandler PropertyChanged;
        
        protected void RaisePropertyChanged(string propertyName) {
            System.ComponentModel.PropertyChangedEventHandler propertyChanged = this.PropertyChanged;
            if ((propertyChanged != null)) {
                propertyChanged(this, new System.ComponentModel.PropertyChangedEventArgs(propertyName));
            }
        }
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    [System.ServiceModel.ServiceContractAttribute(ConfigurationName="ServiceReference1.IService1")]
    public interface IService1 {
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IService1/ConvertDkkToEur", ReplyAction="http://tempuri.org/IService1/ConvertDkkToEurResponse")]
        double ConvertDkkToEur(double value);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IService1/ConvertDkkToEur", ReplyAction="http://tempuri.org/IService1/ConvertDkkToEurResponse")]
        System.Threading.Tasks.Task<double> ConvertDkkToEurAsync(double value);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IService1/GetExchangeRate", ReplyAction="http://tempuri.org/IService1/GetExchangeRateResponse")]
        double GetExchangeRate(string iso);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IService1/GetExchangeRate", ReplyAction="http://tempuri.org/IService1/GetExchangeRateResponse")]
        System.Threading.Tasks.Task<double> GetExchangeRateAsync(string iso);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IService1/GetCurrencyInfo", ReplyAction="http://tempuri.org/IService1/GetCurrencyInfoResponse")]
        Client.ServiceReference1.Currency[] GetCurrencyInfo();
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IService1/GetCurrencyInfo", ReplyAction="http://tempuri.org/IService1/GetCurrencyInfoResponse")]
        System.Threading.Tasks.Task<Client.ServiceReference1.Currency[]> GetCurrencyInfoAsync();
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IService1/CalculateValue", ReplyAction="http://tempuri.org/IService1/CalculateValueResponse")]
        double CalculateValue(string isoFrom, string isoTo, double value);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IService1/CalculateValue", ReplyAction="http://tempuri.org/IService1/CalculateValueResponse")]
        System.Threading.Tasks.Task<double> CalculateValueAsync(string isoFrom, string isoTo, double value);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IService1/ChangeExchangerate", ReplyAction="http://tempuri.org/IService1/ChangeExchangerateResponse")]
        bool ChangeExchangerate(string iso, double value);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IService1/ChangeExchangerate", ReplyAction="http://tempuri.org/IService1/ChangeExchangerateResponse")]
        System.Threading.Tasks.Task<bool> ChangeExchangerateAsync(string iso, double value);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IService1/CreateCurrency", ReplyAction="http://tempuri.org/IService1/CreateCurrencyResponse")]
        bool CreateCurrency(string name, string iso, double exchangeRate);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IService1/CreateCurrency", ReplyAction="http://tempuri.org/IService1/CreateCurrencyResponse")]
        System.Threading.Tasks.Task<bool> CreateCurrencyAsync(string name, string iso, double exchangeRate);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IService1/GetHistory", ReplyAction="http://tempuri.org/IService1/GetHistoryResponse")]
        Client.ServiceReference1.History GetHistory();
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IService1/GetHistory", ReplyAction="http://tempuri.org/IService1/GetHistoryResponse")]
        System.Threading.Tasks.Task<Client.ServiceReference1.History> GetHistoryAsync();
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IService1/AddToHistory", ReplyAction="http://tempuri.org/IService1/AddToHistoryResponse")]
        void AddToHistory(string iso, double value);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IService1/AddToHistory", ReplyAction="http://tempuri.org/IService1/AddToHistoryResponse")]
        System.Threading.Tasks.Task AddToHistoryAsync(string iso, double value);
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public interface IService1Channel : Client.ServiceReference1.IService1, System.ServiceModel.IClientChannel {
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public partial class Service1Client : System.ServiceModel.ClientBase<Client.ServiceReference1.IService1>, Client.ServiceReference1.IService1 {
        
        public Service1Client() {
        }
        
        public Service1Client(string endpointConfigurationName) : 
                base(endpointConfigurationName) {
        }
        
        public Service1Client(string endpointConfigurationName, string remoteAddress) : 
                base(endpointConfigurationName, remoteAddress) {
        }
        
        public Service1Client(string endpointConfigurationName, System.ServiceModel.EndpointAddress remoteAddress) : 
                base(endpointConfigurationName, remoteAddress) {
        }
        
        public Service1Client(System.ServiceModel.Channels.Binding binding, System.ServiceModel.EndpointAddress remoteAddress) : 
                base(binding, remoteAddress) {
        }
        
        public double ConvertDkkToEur(double value) {
            return base.Channel.ConvertDkkToEur(value);
        }
        
        public System.Threading.Tasks.Task<double> ConvertDkkToEurAsync(double value) {
            return base.Channel.ConvertDkkToEurAsync(value);
        }
        
        public double GetExchangeRate(string iso) {
            return base.Channel.GetExchangeRate(iso);
        }
        
        public System.Threading.Tasks.Task<double> GetExchangeRateAsync(string iso) {
            return base.Channel.GetExchangeRateAsync(iso);
        }
        
        public Client.ServiceReference1.Currency[] GetCurrencyInfo() {
            return base.Channel.GetCurrencyInfo();
        }
        
        public System.Threading.Tasks.Task<Client.ServiceReference1.Currency[]> GetCurrencyInfoAsync() {
            return base.Channel.GetCurrencyInfoAsync();
        }
        
        public double CalculateValue(string isoFrom, string isoTo, double value) {
            return base.Channel.CalculateValue(isoFrom, isoTo, value);
        }
        
        public System.Threading.Tasks.Task<double> CalculateValueAsync(string isoFrom, string isoTo, double value) {
            return base.Channel.CalculateValueAsync(isoFrom, isoTo, value);
        }
        
        public bool ChangeExchangerate(string iso, double value) {
            return base.Channel.ChangeExchangerate(iso, value);
        }
        
        public System.Threading.Tasks.Task<bool> ChangeExchangerateAsync(string iso, double value) {
            return base.Channel.ChangeExchangerateAsync(iso, value);
        }
        
        public bool CreateCurrency(string name, string iso, double exchangeRate) {
            return base.Channel.CreateCurrency(name, iso, exchangeRate);
        }
        
        public System.Threading.Tasks.Task<bool> CreateCurrencyAsync(string name, string iso, double exchangeRate) {
            return base.Channel.CreateCurrencyAsync(name, iso, exchangeRate);
        }
        
        public Client.ServiceReference1.History GetHistory() {
            return base.Channel.GetHistory();
        }
        
        public System.Threading.Tasks.Task<Client.ServiceReference1.History> GetHistoryAsync() {
            return base.Channel.GetHistoryAsync();
        }
        
        public void AddToHistory(string iso, double value) {
            base.Channel.AddToHistory(iso, value);
        }
        
        public System.Threading.Tasks.Task AddToHistoryAsync(string iso, double value) {
            return base.Channel.AddToHistoryAsync(iso, value);
        }
    }
}
